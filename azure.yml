trigger:
  branches:
    include:
      - master 

pool:
  vmImage: 'ubuntu-latest'  # Using Linux agent

stages:
  - stage: Build
    displayName: "Build Stage"
    jobs:
      - job: Build
        displayName: "Build Job"
        steps:
          - task: UseDotNet@2
            displayName: 'Install .NET SDK'
            inputs:
              packageType: 'sdk'
              version: '5.x'  # Adjust version to match your project

          - script: |
              dotnet build $(Build.SourcesDirectory)/testdb.sln -c Release
            displayName: 'Build Solution'

          - task: PublishBuildArtifacts@1
            displayName: "Publish DACPAC as Artifact"
            inputs:
              PathtoPublish: '$(Build.SourcesDirectory)/testdb/bin/Release'
              ArtifactName: 'drop'

  - stage: Deploy
    displayName: "Deploy Stage"
    dependsOn: Build
    jobs:
      - deployment: DeployToAzureSQL
        displayName: 'Deploy to Azure SQL Database'
        environment: 'production'
        pool:
          vmImage: 'ubuntu-latest'  # Using Linux agent here as well
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: 'drop'
                  displayName: 'Download Build Artifacts'

                - task: SqlAzureDacpacDeployment@1
                  displayName: 'Deploy DACPAC to Azure SQL Database'
                  inputs:
                    azureSubscription: 'azureconn'  
                    ServerName: 'sampdbdac.database.windows.net' 
                    DatabaseName: 'sampdbdac'  
                    SqlUsername: 'azureconn' 
                    SqlPassword: 'Password@'  
                    DacpacFile: '$(Pipeline.Workspace)/drop/testdb.dacpac' 
                    DeployType: 'DacpacTask'
